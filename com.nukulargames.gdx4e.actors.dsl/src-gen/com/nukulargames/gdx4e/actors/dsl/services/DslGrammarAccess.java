/*
 * generated by Xtext 2.9.2
 */
package com.nukulargames.gdx4e.actors.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class DslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.nukulargames.gdx4e.actors.dsl.Dsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cBasePackageKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cBasePackageAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cBasePackageQualifiedNameParserRuleCall_1_2_0 = (RuleCall)cBasePackageAssignment_1_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cActorsAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cActorsActorParserRuleCall_2_0_0 = (RuleCall)cActorsAssignment_2_0.eContents().get(0);
		private final Assignment cStagesAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cStagesStageParserRuleCall_2_1_0 = (RuleCall)cStagesAssignment_2_1.eContents().get(0);
		
		//Model:
		//	{Model} ('base-package' '=' basePackage=QualifiedName)? (actors+=Actor* & stages+=Stage*);
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} ('base-package' '=' basePackage=QualifiedName)? (actors+=Actor* & stages+=Stage*)
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//('base-package' '=' basePackage=QualifiedName)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'base-package'
		public Keyword getBasePackageKeyword_1_0() { return cBasePackageKeyword_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//basePackage=QualifiedName
		public Assignment getBasePackageAssignment_1_2() { return cBasePackageAssignment_1_2; }
		
		//QualifiedName
		public RuleCall getBasePackageQualifiedNameParserRuleCall_1_2_0() { return cBasePackageQualifiedNameParserRuleCall_1_2_0; }
		
		//(actors+=Actor* & stages+=Stage*)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//actors+=Actor*
		public Assignment getActorsAssignment_2_0() { return cActorsAssignment_2_0; }
		
		//Actor
		public RuleCall getActorsActorParserRuleCall_2_0_0() { return cActorsActorParserRuleCall_2_0_0; }
		
		//stages+=Stage*
		public Assignment getStagesAssignment_2_1() { return cStagesAssignment_2_1; }
		
		//Stage
		public RuleCall getStagesStageParserRuleCall_2_1_0() { return cStagesStageParserRuleCall_2_1_0; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.nukulargames.gdx4e.actors.dsl.Dsl.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3_1 = (UnorderedGroup)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cUnorderedGroup_3_1.eContents().get(0);
		private final Keyword cXKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_0_1 = (Keyword)cGroup_3_1_0.eContents().get(1);
		private final Assignment cXAssignment_3_1_0_2 = (Assignment)cGroup_3_1_0.eContents().get(2);
		private final RuleCall cXEFloatParserRuleCall_3_1_0_2_0 = (RuleCall)cXAssignment_3_1_0_2.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cUnorderedGroup_3_1.eContents().get(1);
		private final Keyword cYKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_1_1 = (Keyword)cGroup_3_1_1.eContents().get(1);
		private final Assignment cYAssignment_3_1_1_2 = (Assignment)cGroup_3_1_1.eContents().get(2);
		private final RuleCall cYEFloatParserRuleCall_3_1_1_2_0 = (RuleCall)cYAssignment_3_1_1_2.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cUnorderedGroup_3_1.eContents().get(2);
		private final Keyword cWidthKeyword_3_1_2_0 = (Keyword)cGroup_3_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_2_1 = (Keyword)cGroup_3_1_2.eContents().get(1);
		private final Assignment cWidthAssignment_3_1_2_2 = (Assignment)cGroup_3_1_2.eContents().get(2);
		private final RuleCall cWidthEFloatParserRuleCall_3_1_2_2_0 = (RuleCall)cWidthAssignment_3_1_2_2.eContents().get(0);
		private final Group cGroup_3_1_3 = (Group)cUnorderedGroup_3_1.eContents().get(3);
		private final Keyword cHeightKeyword_3_1_3_0 = (Keyword)cGroup_3_1_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_3_1 = (Keyword)cGroup_3_1_3.eContents().get(1);
		private final Assignment cHeightAssignment_3_1_3_2 = (Assignment)cGroup_3_1_3.eContents().get(2);
		private final RuleCall cHeightEFloatParserRuleCall_3_1_3_2_0 = (RuleCall)cHeightAssignment_3_1_3_2.eContents().get(0);
		private final Group cGroup_3_1_4 = (Group)cUnorderedGroup_3_1.eContents().get(4);
		private final Keyword cScaleXKeyword_3_1_4_0 = (Keyword)cGroup_3_1_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_4_1 = (Keyword)cGroup_3_1_4.eContents().get(1);
		private final Assignment cScaleXAssignment_3_1_4_2 = (Assignment)cGroup_3_1_4.eContents().get(2);
		private final RuleCall cScaleXEFloatParserRuleCall_3_1_4_2_0 = (RuleCall)cScaleXAssignment_3_1_4_2.eContents().get(0);
		private final Group cGroup_3_1_5 = (Group)cUnorderedGroup_3_1.eContents().get(5);
		private final Keyword cScaleYKeyword_3_1_5_0 = (Keyword)cGroup_3_1_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_5_1 = (Keyword)cGroup_3_1_5.eContents().get(1);
		private final Assignment cScaleYAssignment_3_1_5_2 = (Assignment)cGroup_3_1_5.eContents().get(2);
		private final RuleCall cScaleYEFloatParserRuleCall_3_1_5_2_0 = (RuleCall)cScaleYAssignment_3_1_5_2.eContents().get(0);
		private final Group cGroup_3_1_6 = (Group)cUnorderedGroup_3_1.eContents().get(6);
		private final Keyword cRotationKeyword_3_1_6_0 = (Keyword)cGroup_3_1_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_6_1 = (Keyword)cGroup_3_1_6.eContents().get(1);
		private final Assignment cRotationAssignment_3_1_6_2 = (Assignment)cGroup_3_1_6.eContents().get(2);
		private final RuleCall cRotationEFloatParserRuleCall_3_1_6_2_0 = (RuleCall)cRotationAssignment_3_1_6_2.eContents().get(0);
		private final Group cGroup_3_1_7 = (Group)cUnorderedGroup_3_1.eContents().get(7);
		private final Keyword cRedKeyword_3_1_7_0 = (Keyword)cGroup_3_1_7.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_7_1 = (Keyword)cGroup_3_1_7.eContents().get(1);
		private final Assignment cRedAssignment_3_1_7_2 = (Assignment)cGroup_3_1_7.eContents().get(2);
		private final RuleCall cRedEFloatParserRuleCall_3_1_7_2_0 = (RuleCall)cRedAssignment_3_1_7_2.eContents().get(0);
		private final Group cGroup_3_1_8 = (Group)cUnorderedGroup_3_1.eContents().get(8);
		private final Keyword cGreenKeyword_3_1_8_0 = (Keyword)cGroup_3_1_8.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_8_1 = (Keyword)cGroup_3_1_8.eContents().get(1);
		private final Assignment cGreenAssignment_3_1_8_2 = (Assignment)cGroup_3_1_8.eContents().get(2);
		private final RuleCall cGreenEFloatParserRuleCall_3_1_8_2_0 = (RuleCall)cGreenAssignment_3_1_8_2.eContents().get(0);
		private final Group cGroup_3_1_9 = (Group)cUnorderedGroup_3_1.eContents().get(9);
		private final Keyword cBlueKeyword_3_1_9_0 = (Keyword)cGroup_3_1_9.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_9_1 = (Keyword)cGroup_3_1_9.eContents().get(1);
		private final Assignment cBlueAssignment_3_1_9_2 = (Assignment)cGroup_3_1_9.eContents().get(2);
		private final RuleCall cBlueEFloatParserRuleCall_3_1_9_2_0 = (RuleCall)cBlueAssignment_3_1_9_2.eContents().get(0);
		private final Group cGroup_3_1_10 = (Group)cUnorderedGroup_3_1.eContents().get(10);
		private final Keyword cAlphaKeyword_3_1_10_0 = (Keyword)cGroup_3_1_10.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_10_1 = (Keyword)cGroup_3_1_10.eContents().get(1);
		private final Assignment cAlphaAssignment_3_1_10_2 = (Assignment)cGroup_3_1_10.eContents().get(2);
		private final RuleCall cAlphaEFloatParserRuleCall_3_1_10_2_0 = (RuleCall)cAlphaAssignment_3_1_10_2.eContents().get(0);
		private final Assignment cAnimationsAssignment_3_1_11 = (Assignment)cUnorderedGroup_3_1.eContents().get(11);
		private final RuleCall cAnimationsAnimationParserRuleCall_3_1_11_0 = (RuleCall)cAnimationsAssignment_3_1_11.eContents().get(0);
		private final Assignment cStatesAssignment_3_1_12 = (Assignment)cUnorderedGroup_3_1.eContents().get(12);
		private final RuleCall cStatesStateParserRuleCall_3_1_12_0 = (RuleCall)cStatesAssignment_3_1_12.eContents().get(0);
		private final Assignment cChildrenAssignment_3_1_13 = (Assignment)cUnorderedGroup_3_1.eContents().get(13);
		private final RuleCall cChildrenActorReferenceParserRuleCall_3_1_13_0 = (RuleCall)cChildrenAssignment_3_1_13.eContents().get(0);
		private final Group cGroup_3_1_14 = (Group)cUnorderedGroup_3_1.eContents().get(14);
		private final Keyword cDefaultKeyword_3_1_14_0 = (Keyword)cGroup_3_1_14.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_14_1 = (Keyword)cGroup_3_1_14.eContents().get(1);
		private final Assignment cDefaultStateAssignment_3_1_14_2 = (Assignment)cGroup_3_1_14.eContents().get(2);
		private final CrossReference cDefaultStateStateCrossReference_3_1_14_2_0 = (CrossReference)cDefaultStateAssignment_3_1_14_2.eContents().get(0);
		private final RuleCall cDefaultStateStateIDTerminalRuleCall_3_1_14_2_0_1 = (RuleCall)cDefaultStateStateCrossReference_3_1_14_2_0.eContents().get(1);
		
		//Actor:
		//	{Actor}
		//	'actor'
		//	name=QualifiedName (':' (('x' '=' x=EFloat)? & ('y' '=' y=EFloat)? & ('width' '=' width=EFloat)? & ('height' '='
		//	height=EFloat)? & ('scale-x' '=' scaleX=EFloat)? & ('scale-y' '=' scaleY=EFloat)? & ('rotation' '=' rotation=EFloat)?
		//	& ('red' '=' red=EFloat)? & ('green' '=' green=EFloat)? & ('blue' '=' blue=EFloat)? & ('alpha' '=' alpha=EFloat)? &
		//	animations+=Animation* & states+=State* & children+=ActorReference* & ('default' '=' defaultState=[State])?))?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Actor} 'actor' name=QualifiedName (':' (('x' '=' x=EFloat)? & ('y' '=' y=EFloat)? & ('width' '=' width=EFloat)? &
		//('height' '=' height=EFloat)? & ('scale-x' '=' scaleX=EFloat)? & ('scale-y' '=' scaleY=EFloat)? & ('rotation' '='
		//rotation=EFloat)? & ('red' '=' red=EFloat)? & ('green' '=' green=EFloat)? & ('blue' '=' blue=EFloat)? & ('alpha' '='
		//alpha=EFloat)? & animations+=Animation* & states+=State* & children+=ActorReference* & ('default' '='
		//defaultState=[State])?))?
		public Group getGroup() { return cGroup; }
		
		//{Actor}
		public Action getActorAction_0() { return cActorAction_0; }
		
		//'actor'
		public Keyword getActorKeyword_1() { return cActorKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//(':' (('x' '=' x=EFloat)? & ('y' '=' y=EFloat)? & ('width' '=' width=EFloat)? & ('height' '=' height=EFloat)? &
		//('scale-x' '=' scaleX=EFloat)? & ('scale-y' '=' scaleY=EFloat)? & ('rotation' '=' rotation=EFloat)? & ('red' '='
		//red=EFloat)? & ('green' '=' green=EFloat)? & ('blue' '=' blue=EFloat)? & ('alpha' '=' alpha=EFloat)? &
		//animations+=Animation* & states+=State* & children+=ActorReference* & ('default' '=' defaultState=[State])?))?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//(('x' '=' x=EFloat)? & ('y' '=' y=EFloat)? & ('width' '=' width=EFloat)? & ('height' '=' height=EFloat)? & ('scale-x'
		//'=' scaleX=EFloat)? & ('scale-y' '=' scaleY=EFloat)? & ('rotation' '=' rotation=EFloat)? & ('red' '=' red=EFloat)? &
		//('green' '=' green=EFloat)? & ('blue' '=' blue=EFloat)? & ('alpha' '=' alpha=EFloat)? & animations+=Animation* &
		//states+=State* & children+=ActorReference* & ('default' '=' defaultState=[State])?)
		public UnorderedGroup getUnorderedGroup_3_1() { return cUnorderedGroup_3_1; }
		
		//('x' '=' x=EFloat)?
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//'x'
		public Keyword getXKeyword_3_1_0_0() { return cXKeyword_3_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_0_1() { return cEqualsSignKeyword_3_1_0_1; }
		
		//x=EFloat
		public Assignment getXAssignment_3_1_0_2() { return cXAssignment_3_1_0_2; }
		
		//EFloat
		public RuleCall getXEFloatParserRuleCall_3_1_0_2_0() { return cXEFloatParserRuleCall_3_1_0_2_0; }
		
		//('y' '=' y=EFloat)?
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//'y'
		public Keyword getYKeyword_3_1_1_0() { return cYKeyword_3_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_1_1() { return cEqualsSignKeyword_3_1_1_1; }
		
		//y=EFloat
		public Assignment getYAssignment_3_1_1_2() { return cYAssignment_3_1_1_2; }
		
		//EFloat
		public RuleCall getYEFloatParserRuleCall_3_1_1_2_0() { return cYEFloatParserRuleCall_3_1_1_2_0; }
		
		//('width' '=' width=EFloat)?
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }
		
		//'width'
		public Keyword getWidthKeyword_3_1_2_0() { return cWidthKeyword_3_1_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_2_1() { return cEqualsSignKeyword_3_1_2_1; }
		
		//width=EFloat
		public Assignment getWidthAssignment_3_1_2_2() { return cWidthAssignment_3_1_2_2; }
		
		//EFloat
		public RuleCall getWidthEFloatParserRuleCall_3_1_2_2_0() { return cWidthEFloatParserRuleCall_3_1_2_2_0; }
		
		//('height' '=' height=EFloat)?
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }
		
		//'height'
		public Keyword getHeightKeyword_3_1_3_0() { return cHeightKeyword_3_1_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_3_1() { return cEqualsSignKeyword_3_1_3_1; }
		
		//height=EFloat
		public Assignment getHeightAssignment_3_1_3_2() { return cHeightAssignment_3_1_3_2; }
		
		//EFloat
		public RuleCall getHeightEFloatParserRuleCall_3_1_3_2_0() { return cHeightEFloatParserRuleCall_3_1_3_2_0; }
		
		//('scale-x' '=' scaleX=EFloat)?
		public Group getGroup_3_1_4() { return cGroup_3_1_4; }
		
		//'scale-x'
		public Keyword getScaleXKeyword_3_1_4_0() { return cScaleXKeyword_3_1_4_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_4_1() { return cEqualsSignKeyword_3_1_4_1; }
		
		//scaleX=EFloat
		public Assignment getScaleXAssignment_3_1_4_2() { return cScaleXAssignment_3_1_4_2; }
		
		//EFloat
		public RuleCall getScaleXEFloatParserRuleCall_3_1_4_2_0() { return cScaleXEFloatParserRuleCall_3_1_4_2_0; }
		
		//('scale-y' '=' scaleY=EFloat)?
		public Group getGroup_3_1_5() { return cGroup_3_1_5; }
		
		//'scale-y'
		public Keyword getScaleYKeyword_3_1_5_0() { return cScaleYKeyword_3_1_5_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_5_1() { return cEqualsSignKeyword_3_1_5_1; }
		
		//scaleY=EFloat
		public Assignment getScaleYAssignment_3_1_5_2() { return cScaleYAssignment_3_1_5_2; }
		
		//EFloat
		public RuleCall getScaleYEFloatParserRuleCall_3_1_5_2_0() { return cScaleYEFloatParserRuleCall_3_1_5_2_0; }
		
		//('rotation' '=' rotation=EFloat)?
		public Group getGroup_3_1_6() { return cGroup_3_1_6; }
		
		//'rotation'
		public Keyword getRotationKeyword_3_1_6_0() { return cRotationKeyword_3_1_6_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_6_1() { return cEqualsSignKeyword_3_1_6_1; }
		
		//rotation=EFloat
		public Assignment getRotationAssignment_3_1_6_2() { return cRotationAssignment_3_1_6_2; }
		
		//EFloat
		public RuleCall getRotationEFloatParserRuleCall_3_1_6_2_0() { return cRotationEFloatParserRuleCall_3_1_6_2_0; }
		
		//('red' '=' red=EFloat)?
		public Group getGroup_3_1_7() { return cGroup_3_1_7; }
		
		//'red'
		public Keyword getRedKeyword_3_1_7_0() { return cRedKeyword_3_1_7_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_7_1() { return cEqualsSignKeyword_3_1_7_1; }
		
		//red=EFloat
		public Assignment getRedAssignment_3_1_7_2() { return cRedAssignment_3_1_7_2; }
		
		//EFloat
		public RuleCall getRedEFloatParserRuleCall_3_1_7_2_0() { return cRedEFloatParserRuleCall_3_1_7_2_0; }
		
		//('green' '=' green=EFloat)?
		public Group getGroup_3_1_8() { return cGroup_3_1_8; }
		
		//'green'
		public Keyword getGreenKeyword_3_1_8_0() { return cGreenKeyword_3_1_8_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_8_1() { return cEqualsSignKeyword_3_1_8_1; }
		
		//green=EFloat
		public Assignment getGreenAssignment_3_1_8_2() { return cGreenAssignment_3_1_8_2; }
		
		//EFloat
		public RuleCall getGreenEFloatParserRuleCall_3_1_8_2_0() { return cGreenEFloatParserRuleCall_3_1_8_2_0; }
		
		//('blue' '=' blue=EFloat)?
		public Group getGroup_3_1_9() { return cGroup_3_1_9; }
		
		//'blue'
		public Keyword getBlueKeyword_3_1_9_0() { return cBlueKeyword_3_1_9_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_9_1() { return cEqualsSignKeyword_3_1_9_1; }
		
		//blue=EFloat
		public Assignment getBlueAssignment_3_1_9_2() { return cBlueAssignment_3_1_9_2; }
		
		//EFloat
		public RuleCall getBlueEFloatParserRuleCall_3_1_9_2_0() { return cBlueEFloatParserRuleCall_3_1_9_2_0; }
		
		//('alpha' '=' alpha=EFloat)?
		public Group getGroup_3_1_10() { return cGroup_3_1_10; }
		
		//'alpha'
		public Keyword getAlphaKeyword_3_1_10_0() { return cAlphaKeyword_3_1_10_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_10_1() { return cEqualsSignKeyword_3_1_10_1; }
		
		//alpha=EFloat
		public Assignment getAlphaAssignment_3_1_10_2() { return cAlphaAssignment_3_1_10_2; }
		
		//EFloat
		public RuleCall getAlphaEFloatParserRuleCall_3_1_10_2_0() { return cAlphaEFloatParserRuleCall_3_1_10_2_0; }
		
		//animations+=Animation*
		public Assignment getAnimationsAssignment_3_1_11() { return cAnimationsAssignment_3_1_11; }
		
		//Animation
		public RuleCall getAnimationsAnimationParserRuleCall_3_1_11_0() { return cAnimationsAnimationParserRuleCall_3_1_11_0; }
		
		//states+=State*
		public Assignment getStatesAssignment_3_1_12() { return cStatesAssignment_3_1_12; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_3_1_12_0() { return cStatesStateParserRuleCall_3_1_12_0; }
		
		//children+=ActorReference*
		public Assignment getChildrenAssignment_3_1_13() { return cChildrenAssignment_3_1_13; }
		
		//ActorReference
		public RuleCall getChildrenActorReferenceParserRuleCall_3_1_13_0() { return cChildrenActorReferenceParserRuleCall_3_1_13_0; }
		
		//('default' '=' defaultState=[State])?
		public Group getGroup_3_1_14() { return cGroup_3_1_14; }
		
		//'default'
		public Keyword getDefaultKeyword_3_1_14_0() { return cDefaultKeyword_3_1_14_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_14_1() { return cEqualsSignKeyword_3_1_14_1; }
		
		//defaultState=[State]
		public Assignment getDefaultStateAssignment_3_1_14_2() { return cDefaultStateAssignment_3_1_14_2; }
		
		//[State]
		public CrossReference getDefaultStateStateCrossReference_3_1_14_2_0() { return cDefaultStateStateCrossReference_3_1_14_2_0; }
		
		//ID
		public RuleCall getDefaultStateStateIDTerminalRuleCall_3_1_14_2_0_1() { return cDefaultStateStateIDTerminalRuleCall_3_1_14_2_0_1; }
	}
	public class AnimationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.nukulargames.gdx4e.actors.dsl.Dsl.Animation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnimationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAnimationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3_1 = (UnorderedGroup)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cUnorderedGroup_3_1.eContents().get(0);
		private final Keyword cTextureKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_0_1 = (Keyword)cGroup_3_1_0.eContents().get(1);
		private final Assignment cTextureAssignment_3_1_0_2 = (Assignment)cGroup_3_1_0.eContents().get(2);
		private final RuleCall cTextureSTRINGTerminalRuleCall_3_1_0_2_0 = (RuleCall)cTextureAssignment_3_1_0_2.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cUnorderedGroup_3_1.eContents().get(1);
		private final Keyword cColumnsKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_1_1 = (Keyword)cGroup_3_1_1.eContents().get(1);
		private final Assignment cColumnsAssignment_3_1_1_2 = (Assignment)cGroup_3_1_1.eContents().get(2);
		private final RuleCall cColumnsEIntParserRuleCall_3_1_1_2_0 = (RuleCall)cColumnsAssignment_3_1_1_2.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cUnorderedGroup_3_1.eContents().get(2);
		private final Keyword cRowsKeyword_3_1_2_0 = (Keyword)cGroup_3_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_2_1 = (Keyword)cGroup_3_1_2.eContents().get(1);
		private final Assignment cRowsAssignment_3_1_2_2 = (Assignment)cGroup_3_1_2.eContents().get(2);
		private final RuleCall cRowsEIntParserRuleCall_3_1_2_2_0 = (RuleCall)cRowsAssignment_3_1_2_2.eContents().get(0);
		private final Group cGroup_3_1_3 = (Group)cUnorderedGroup_3_1.eContents().get(3);
		private final Keyword cDelayKeyword_3_1_3_0 = (Keyword)cGroup_3_1_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_3_1 = (Keyword)cGroup_3_1_3.eContents().get(1);
		private final Assignment cDelayAssignment_3_1_3_2 = (Assignment)cGroup_3_1_3.eContents().get(2);
		private final RuleCall cDelayEFloatParserRuleCall_3_1_3_2_0 = (RuleCall)cDelayAssignment_3_1_3_2.eContents().get(0);
		
		//Animation:
		//	{Animation}
		//	'animation'
		//	name=QualifiedName (':' (('texture' '=' texture=STRING)? & ('columns' '=' columns=EInt)? & ('rows' '=' rows=EInt)? &
		//	('delay' '=' delay=EFloat)?))?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Animation} 'animation' name=QualifiedName (':' (('texture' '=' texture=STRING)? & ('columns' '=' columns=EInt)? &
		//('rows' '=' rows=EInt)? & ('delay' '=' delay=EFloat)?))?
		public Group getGroup() { return cGroup; }
		
		//{Animation}
		public Action getAnimationAction_0() { return cAnimationAction_0; }
		
		//'animation'
		public Keyword getAnimationKeyword_1() { return cAnimationKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//(':' (('texture' '=' texture=STRING)? & ('columns' '=' columns=EInt)? & ('rows' '=' rows=EInt)? & ('delay' '='
		//delay=EFloat)?))?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//(('texture' '=' texture=STRING)? & ('columns' '=' columns=EInt)? & ('rows' '=' rows=EInt)? & ('delay' '='
		//delay=EFloat)?)
		public UnorderedGroup getUnorderedGroup_3_1() { return cUnorderedGroup_3_1; }
		
		//('texture' '=' texture=STRING)?
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//'texture'
		public Keyword getTextureKeyword_3_1_0_0() { return cTextureKeyword_3_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_0_1() { return cEqualsSignKeyword_3_1_0_1; }
		
		//texture=STRING
		public Assignment getTextureAssignment_3_1_0_2() { return cTextureAssignment_3_1_0_2; }
		
		//STRING
		public RuleCall getTextureSTRINGTerminalRuleCall_3_1_0_2_0() { return cTextureSTRINGTerminalRuleCall_3_1_0_2_0; }
		
		//('columns' '=' columns=EInt)?
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//'columns'
		public Keyword getColumnsKeyword_3_1_1_0() { return cColumnsKeyword_3_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_1_1() { return cEqualsSignKeyword_3_1_1_1; }
		
		//columns=EInt
		public Assignment getColumnsAssignment_3_1_1_2() { return cColumnsAssignment_3_1_1_2; }
		
		//EInt
		public RuleCall getColumnsEIntParserRuleCall_3_1_1_2_0() { return cColumnsEIntParserRuleCall_3_1_1_2_0; }
		
		//('rows' '=' rows=EInt)?
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }
		
		//'rows'
		public Keyword getRowsKeyword_3_1_2_0() { return cRowsKeyword_3_1_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_2_1() { return cEqualsSignKeyword_3_1_2_1; }
		
		//rows=EInt
		public Assignment getRowsAssignment_3_1_2_2() { return cRowsAssignment_3_1_2_2; }
		
		//EInt
		public RuleCall getRowsEIntParserRuleCall_3_1_2_2_0() { return cRowsEIntParserRuleCall_3_1_2_2_0; }
		
		//('delay' '=' delay=EFloat)?
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }
		
		//'delay'
		public Keyword getDelayKeyword_3_1_3_0() { return cDelayKeyword_3_1_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_3_1() { return cEqualsSignKeyword_3_1_3_1; }
		
		//delay=EFloat
		public Assignment getDelayAssignment_3_1_3_2() { return cDelayAssignment_3_1_3_2; }
		
		//EFloat
		public RuleCall getDelayEFloatParserRuleCall_3_1_3_2_0() { return cDelayEFloatParserRuleCall_3_1_3_2_0; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.nukulargames.gdx4e.actors.dsl.Dsl.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cAnimationKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cAnimationAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final CrossReference cAnimationAnimationCrossReference_3_1_2_0 = (CrossReference)cAnimationAssignment_3_1_2.eContents().get(0);
		private final RuleCall cAnimationAnimationQualifiedNameParserRuleCall_3_1_2_0_1 = (RuleCall)cAnimationAnimationCrossReference_3_1_2_0.eContents().get(1);
		
		//State:
		//	{State}
		//	'state'
		//	name=QualifiedName (':' ('animation' '=' animation=[Animation|QualifiedName])?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{State} 'state' name=QualifiedName (':' ('animation' '=' animation=[Animation|QualifiedName])?)?
		public Group getGroup() { return cGroup; }
		
		//{State}
		public Action getStateAction_0() { return cStateAction_0; }
		
		//'state'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//(':' ('animation' '=' animation=[Animation|QualifiedName])?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//('animation' '=' animation=[Animation|QualifiedName])?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'animation'
		public Keyword getAnimationKeyword_3_1_0() { return cAnimationKeyword_3_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1_1() { return cEqualsSignKeyword_3_1_1; }
		
		//animation=[Animation|QualifiedName]
		public Assignment getAnimationAssignment_3_1_2() { return cAnimationAssignment_3_1_2; }
		
		//[Animation|QualifiedName]
		public CrossReference getAnimationAnimationCrossReference_3_1_2_0() { return cAnimationAnimationCrossReference_3_1_2_0; }
		
		//QualifiedName
		public RuleCall getAnimationAnimationQualifiedNameParserRuleCall_3_1_2_0_1() { return cAnimationAnimationQualifiedNameParserRuleCall_3_1_2_0_1; }
	}
	public class ActorReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.nukulargames.gdx4e.actors.dsl.Dsl.ActorReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActorReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cHoldsKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cHoldsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cHoldsActorParserRuleCall_1_0_1_0 = (RuleCall)cHoldsAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cUsesKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cUsesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cUsesActorCrossReference_1_1_1_0 = (CrossReference)cUsesAssignment_1_1_1.eContents().get(0);
		private final RuleCall cUsesActorQualifiedNameParserRuleCall_1_1_1_0_1 = (RuleCall)cUsesActorCrossReference_1_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cQuantityKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cQuantityAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cQuantityEIntParserRuleCall_2_0_2_0 = (RuleCall)cQuantityAssignment_2_0_2.eContents().get(0);
		
		//ActorReference:
		//	{ActorReference} ('holds' holds=Actor | 'uses' uses=[Actor|QualifiedName])
		//	=> ('quantity' '=' quantity=EInt)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ActorReference} ('holds' holds=Actor | 'uses' uses=[Actor|QualifiedName]) => ('quantity' '=' quantity=EInt)?
		public Group getGroup() { return cGroup; }
		
		//{ActorReference}
		public Action getActorReferenceAction_0() { return cActorReferenceAction_0; }
		
		//('holds' holds=Actor | 'uses' uses=[Actor|QualifiedName])
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'holds' holds=Actor
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'holds'
		public Keyword getHoldsKeyword_1_0_0() { return cHoldsKeyword_1_0_0; }
		
		//holds=Actor
		public Assignment getHoldsAssignment_1_0_1() { return cHoldsAssignment_1_0_1; }
		
		//Actor
		public RuleCall getHoldsActorParserRuleCall_1_0_1_0() { return cHoldsActorParserRuleCall_1_0_1_0; }
		
		//'uses' uses=[Actor|QualifiedName]
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'uses'
		public Keyword getUsesKeyword_1_1_0() { return cUsesKeyword_1_1_0; }
		
		//uses=[Actor|QualifiedName]
		public Assignment getUsesAssignment_1_1_1() { return cUsesAssignment_1_1_1; }
		
		//[Actor|QualifiedName]
		public CrossReference getUsesActorCrossReference_1_1_1_0() { return cUsesActorCrossReference_1_1_1_0; }
		
		//QualifiedName
		public RuleCall getUsesActorQualifiedNameParserRuleCall_1_1_1_0_1() { return cUsesActorQualifiedNameParserRuleCall_1_1_1_0_1; }
		
		//=> ('quantity' '=' quantity=EInt)?
		public Group getGroup_2() { return cGroup_2; }
		
		//('quantity' '=' quantity=EInt)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'quantity'
		public Keyword getQuantityKeyword_2_0_0() { return cQuantityKeyword_2_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0_1() { return cEqualsSignKeyword_2_0_1; }
		
		//quantity=EInt
		public Assignment getQuantityAssignment_2_0_2() { return cQuantityAssignment_2_0_2; }
		
		//EInt
		public RuleCall getQuantityEIntParserRuleCall_2_0_2_0() { return cQuantityEIntParserRuleCall_2_0_2_0; }
	}
	public class StageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.nukulargames.gdx4e.actors.dsl.Dsl.Stage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cActorsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cActorsActorReferenceParserRuleCall_3_1_0 = (RuleCall)cActorsAssignment_3_1.eContents().get(0);
		
		//Stage:
		//	{Stage}
		//	'stage'
		//	name=QualifiedName (':'
		//	actors+=ActorReference*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Stage} 'stage' name=QualifiedName (':' actors+=ActorReference*)?
		public Group getGroup() { return cGroup; }
		
		//{Stage}
		public Action getStageAction_0() { return cStageAction_0; }
		
		//'stage'
		public Keyword getStageKeyword_1() { return cStageKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//(':' actors+=ActorReference*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//actors+=ActorReference*
		public Assignment getActorsAssignment_3_1() { return cActorsAssignment_3_1; }
		
		//ActorReference
		public RuleCall getActorsActorReferenceParserRuleCall_3_1_0() { return cActorsActorReferenceParserRuleCall_3_1_0; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.nukulargames.gdx4e.actors.dsl.Dsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.nukulargames.gdx4e.actors.dsl.Dsl.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EFloat ecore::EFloat:
		//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E' | 'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E' | 'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	
	
	private final ModelElements pModel;
	private final ActorElements pActor;
	private final AnimationElements pAnimation;
	private final StateElements pState;
	private final ActorReferenceElements pActorReference;
	private final StageElements pStage;
	private final EIntElements pEInt;
	private final EFloatElements pEFloat;
	
	private final Grammar grammar;
	
	private final XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbaseWithAnnotations = gaXbaseWithAnnotations;
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pModel = new ModelElements();
		this.pActor = new ActorElements();
		this.pAnimation = new AnimationElements();
		this.pState = new StateElements();
		this.pActorReference = new ActorReferenceElements();
		this.pStage = new StageElements();
		this.pEInt = new EIntElements();
		this.pEFloat = new EFloatElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.nukulargames.gdx4e.actors.dsl.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseWithAnnotationsGrammarAccess getXbaseWithAnnotationsGrammarAccess() {
		return gaXbaseWithAnnotations;
	}
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Model:
	//	{Model} ('base-package' '=' basePackage=QualifiedName)? (actors+=Actor* & stages+=Stage*);
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Actor:
	//	{Actor}
	//	'actor'
	//	name=QualifiedName (':' (('x' '=' x=EFloat)? & ('y' '=' y=EFloat)? & ('width' '=' width=EFloat)? & ('height' '='
	//	height=EFloat)? & ('scale-x' '=' scaleX=EFloat)? & ('scale-y' '=' scaleY=EFloat)? & ('rotation' '=' rotation=EFloat)?
	//	& ('red' '=' red=EFloat)? & ('green' '=' green=EFloat)? & ('blue' '=' blue=EFloat)? & ('alpha' '=' alpha=EFloat)? &
	//	animations+=Animation* & states+=State* & children+=ActorReference* & ('default' '=' defaultState=[State])?))?;
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//Animation:
	//	{Animation}
	//	'animation'
	//	name=QualifiedName (':' (('texture' '=' texture=STRING)? & ('columns' '=' columns=EInt)? & ('rows' '=' rows=EInt)? &
	//	('delay' '=' delay=EFloat)?))?;
	public AnimationElements getAnimationAccess() {
		return pAnimation;
	}
	
	public ParserRule getAnimationRule() {
		return getAnimationAccess().getRule();
	}
	
	//State:
	//	{State}
	//	'state'
	//	name=QualifiedName (':' ('animation' '=' animation=[Animation|QualifiedName])?)?;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//ActorReference:
	//	{ActorReference} ('holds' holds=Actor | 'uses' uses=[Actor|QualifiedName])
	//	=> ('quantity' '=' quantity=EInt)?;
	public ActorReferenceElements getActorReferenceAccess() {
		return pActorReference;
	}
	
	public ParserRule getActorReferenceRule() {
		return getActorReferenceAccess().getRule();
	}
	
	//Stage:
	//	{Stage}
	//	'stage'
	//	name=QualifiedName (':'
	//	actors+=ActorReference*)?;
	public StageElements getStageAccess() {
		return pStage;
	}
	
	public ParserRule getStageRule() {
		return getStageAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EFloat ecore::EFloat:
	//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//XAnnotation:
	//	{XAnnotation} '@' annotationType=[types::JvmAnnotationType|QualifiedName] (=> '('
	//	(elementValuePairs+=XAnnotationElementValuePair (',' elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=XAnnotationElementValueOrCommaList)? ')')?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}
	
	//XAnnotationElementValuePair:
	//	=> (element=[types::JvmOperation|ValidID] '=') value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}
	
	//XAnnotationElementValueOrCommaList xbase::XExpression:
	//	=> ({xbase::XListLiteral} '#' '[') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression)*)? ']'
	//	| XAnnotationOrExpression ({xbase::XListLiteral.elements+=current} (',' elements+=XAnnotationOrExpression)+)?
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueOrCommaListElements getXAnnotationElementValueOrCommaListAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueOrCommaListAccess();
	}
	
	public ParserRule getXAnnotationElementValueOrCommaListRule() {
		return getXAnnotationElementValueOrCommaListAccess().getRule();
	}
	
	//XAnnotationElementValue xbase::XExpression:
	//	=> ({xbase::XListLiteral} '#' '[') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression)*)? ']'
	//	| XAnnotationOrExpression
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}
	
	//XAnnotationOrExpression xbase::XExpression:
	//	XAnnotation | XExpression
	public XbaseWithAnnotationsGrammarAccess.XAnnotationOrExpressionElements getXAnnotationOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXAnnotationOrExpressionAccess();
	}
	
	public ParserRule getXAnnotationOrExpressionRule() {
		return getXAnnotationOrExpressionAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '<' '<' '=' | '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->' | '..<' | '>' '..' | '..' | '=>' | '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>' | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?)*
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure} '[') => ((declaredFormalParameters+=JvmFormalParameter (','
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? expression=XExpressionInClosure ']'
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')'
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression} 'if' '(' if=XExpression ')' then=XExpression (=> 'else' else=XExpression)?
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression} 'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')' | =>
	//	(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{' cases+=XCasePart* ('default' ':'
	//	default=XExpression)? '}'
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression} 'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression} 'for' '(' (initExpressions+=XExpressionOrVarDeclaration (','
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ';' expression=XExpression? ';' (updateExpressions+=XExpression (','
	//	updateExpressions+=XExpression)*)? ')' eachExpression=XExpression
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression} 'while' '(' predicate=XExpression ')' body=XExpression
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression} 'do' body=XExpression 'while' '(' predicate=XExpression ')'
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression} '{' (expressions+=XExpressionOrVarDeclaration ';'?)* '}'
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')? featureCallArguments+=XClosure?
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall} 'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? (=>
	//	explicitConstructorCall?='(' (arguments+=XShortClosure | arguments+=XExpression (',' arguments+=XExpression)*)? ')')?
	//	arguments+=XClosure?
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true')
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null'
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')'
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression} 'try' expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally'
	//	finallyExpression=XExpression)? | 'finally' finallyExpression=XExpression)
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression} 'synchronized' '(') param=XExpression ')' expression=XExpression
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? | "'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
