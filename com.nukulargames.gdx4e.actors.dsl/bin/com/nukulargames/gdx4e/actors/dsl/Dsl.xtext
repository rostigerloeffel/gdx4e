// automatically generated by Xtext
grammar com.nukulargames.gdx4e.actors.dsl.Dsl with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

import "com.nukulargames/gdx4e/actors" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype

Model returns Model:
	{Model}
	('base-package' '=' basePackage = QualifiedName)?
	actors+=Actor*;

Actor returns Actor:
	{Actor}
	'actor'
	name=QualifiedName
	(':'
		(('x' '=' x=EFloat)? &
		('y' '=' y=EFloat)? &
		('width' '=' width=EFloat)? &
		('height' '=' height=EFloat)? &
		('scale-x' '=' scaleX=EFloat)? &
		('scale-y' '=' scaleY=EFloat)? &
		('rotation' '=' rotation=EFloat)? &
		('red' '=' red=EFloat)? &
		('green' '=' green=EFloat)? &
		('blue' '=' blue=EFloat)? &
		('alpha' '=' alpha=EFloat)? &
		animations += Animation* &
		states += State* &
		children += ActorReference* &
		('default' '=' defaultState = [State])?))?;

Animation returns Animation:
	{Animation}
	'animation'
	name=QualifiedName
	(':'
		(('texture' '=' texture=STRING)? &
		('columns' '=' columns=EInt)? &
		('rows' '=' rows=EInt)? &
		('delay' '=' delay=EFloat)?))?;

State returns State:
	{State}
	'state'
	name=QualifiedName
	(':'
		('animation' '=' animation=[Animation|QualifiedName])?)?;

ActorReference returns ActorReference:
	{ActorReference}
	(('holds' holds = Actor) | 
	('uses' uses = [Actor|QualifiedName]))
	=>('quantity' '=' quantity = EInt)?;

Stage returns Stage:
	{Stage}
	'stage'
	name=QualifiedName
	(':'
		actors += ActorReference*
	)?;

EInt returns ecore::EInt:
	'-'? INT;

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;